#!/usr/bin/python
# *-* coding: utf-8 *-*
# Author: Thomas Martin <thomas.martin.1@ulaval.ca>
# file: orbs-check

## Copyright (c) 2010-2015 Thomas Martin <thomas.martin.1@ulaval.ca>
## 
## This file is part of ORBS
##
## ORBS is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## ORBS is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
## or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
## License for more details.
##
## You should have received a copy of the GNU General Public License
## along with ORBS.  If not, see <http://www.gnu.org/licenses/>.

__licence__ = "GPLv3 Thomas Martin (thomas.martin.1@ulaval.ca)"
__docformat__ = 'reStructuredText'
__version__ = "0.5dev"

import os, sys

import orbs
from orbs.orbs import Orbs
from orbs.process import InterferogramMerger, Interferogram
from orb.core import Tools, Cube
from orb.visual import BaseViewer
import orb.utils
import orb.astrometry

# Other imports
import argparse
from argparse import ArgumentParser
import numpy as np
import pylab as pl
import gtk
import gobject

####################################################
############ OrbsCheck class #######################
####################################################
class OrbsCheck(Tools):
    """
    OrbsCheck class is aimed to collect and analyse data from ORBS
    reduction files for a given project.

    .. warning:: OrbsCheck is built over ORBS so that ORBS must be
      installed. Please make sure to give OrbsCheck the correct path to
      ORBS files
   
    .. note:: OrbsCheck uses :py:class:`orbscheck.Graph` to display the
      collected informations.
    """

    MIN_STAR_NB = 30 # Number of stars to detect for statitstics
    
    _orbs = None # Orbs() instance
    _graph = None # Graph() instance

    _interf_frame_A = None # Deep image from the corrected interferogram cube A
    _interf_frame_B = None # Deep image from the corrected interferogram cube B

    _star_list_A = None # List of star position detected by OrbsCheck
    _mean_fwhm = None # mean FWHM of stars detected by OrbsCheck
    raw_frame_nb = None
    
    def __init__(self, options_file_path, mode):
        """Initialize :py:class:`orbscheck.OrbsCheck`

        :param options_file_path: Path to the option file used by
           :py:class:`orbs.Orbs` for the project to analyse.

        :param mode: can be 'sitelle' or 'spiomm'
        """
        self._print_msg("OrbsCheck initialization")
        if mode == 'sitelle':
            config_file_name='config.sitelle.orb'
        elif mode == 'spiomm':
            config_file_name='config.spiomm.orb'
        else:
            self._print_error('Mode must be set to sitelle or spiomm')
            
        self._orbs = Orbs(options_file_path, 'object', 'full',
                          config_file_name=config_file_name)
        self._graph = Graph()
        cube = self._orbs._init_raw_data_cube(1)
        self.raw_frame_nb = cube.dimz
        

    def show_transmission_vector(self, cam):
        """Get the transmission vector computed during interferogram
        merging and display it.
        
        .. seealso:: :py:meth:`orbs.Orbs.merge_interferograms`
        """
        if cam == 'MERGED':
            cube = InterferogramMerger(
                None, None, data_prefix=self._orbs._get_data_prefix(0))
        elif cam == 'CAM1':
            cube = Interferogram(None, data_prefix=self._orbs._get_data_prefix(1))
        elif cam == 'CAM2':
            cube = Interferogram(None, data_prefix=self._orbs._get_data_prefix(2))
            
        transmission_vector = self.read_fits(
            cube._get_transmission_vector_path())

        if cam == 'MERGED':
            transmission_vector_err = self.read_fits(
                cube._get_transmission_vector_path(err=True))
        else:
            transmission_vector_err = None
        
        self._graph.pop_plot(transmission_vector, xlabel="Frame index",
                             ylabel="Transmission coefficient",
                             title="Transmission vector",
                             yerr=transmission_vector_err)

    def show_ext_illumination_vector(self):
        """Get the external illumination vector computed during
        interferogram merging and display it.
        
        .. seealso:: :py:meth:`orbs.Orbs.merge_interferograms`
        """
        cube = InterferogramMerger(
            None, None, data_prefix=self._orbs._get_data_prefix(0))
        ext_illumination_vector = self.read_fits(
            cube._get_ext_illumination_vector_path())
        self._graph.pop_plot(ext_illumination_vector, xlabel="Frame index",
                             ylabel="Counts",
                             title="External illumination vector")

    def show_stray_light_vector(self, cam):
        """Get the stray light vector computed during interferogram
        merging and display it.
        
        .. seealso:: :py:meth:`orbs.Orbs.merge_interferograms`
        """
        if cam == 'MERGED':
            cube = InterferogramMerger(
                None, None, data_prefix=self._orbs._get_data_prefix(0))
        elif cam == 'CAM1':
            cube = Interferogram(None, data_prefix=self._orbs._get_data_prefix(1))
        elif cam == 'CAM2':
            cube = Interferogram(None, data_prefix=self._orbs._get_data_prefix(2))

        stray_light_vector = self.read_fits(
            cube._get_stray_light_vector_path())
        self._graph.pop_plot(stray_light_vector, xlabel="Frame index",
                             ylabel="Counts",
                             title="Stray light vector")

    def show_alignment_vector(self, camera_number):
        """Get the alignement vector computed to align the frames of
        the raw data cube of each camera and display it.

        :param camera_number: The number of the camera to analyse
          (must be 1 or 2)

        :param err: (Optional) If True, show error vector (default
          False)

        .. seealso:: :py:meth:`orbs.Orbs.compute_alignment_vector`
        """
        cube = self._orbs._init_raw_data_cube(camera_number)
        alignment_vector = self.read_fits(cube._get_alignment_vector_path(err=False))
        alignment_error = self.read_fits(cube._get_alignment_vector_path(err=True))
        alignment_error = np.array([alignment_error,
                                    alignment_error]).T
        print alignment_error.shape, alignment_vector.shape
        ylabel = "Alignment error (in pixels)"
        title = "Alignment error camera %d"%camera_number
        self._graph.pop_plot(alignment_vector,
                             xlabel="Frame index",
                             ylabel=ylabel,
                             yerr=alignment_error,
                             title=title,
                             ylim=[-5,5])

    def show_detected_stars(self, camera_number):
        """Get the position of the detected stars used for the
        alignment processes and diplay it over a frame of the
        concerned data cube using ds9.

        :param camera_number: The number of the camera to analyse
          (must be 1 or 2)

        .. seealso:: :py:meth:`orbs.Orbs.compute_alignment_vector`
        .. seealso:: :py:meth:`orbs.Orbs.transform_cube_B`
        .. seealso:: :py:meth:`astrometry.Astrometry.detect_stars`
        """
        cube = self._orbs._init_raw_data_cube(camera_number)
        frame = cube[:,:,0]
        vmax = orb.cutils.part_value(frame.flatten(), 0.995)
        vmin = orb.cutils.part_value(frame.flatten(), 0.05)
        pl.imshow(frame.T, vmin=vmin, vmax=vmax)
        astrom = self._orbs._init_astrometry(cube, camera_number)
        star_list = orb.astrometry.load_star_list(astrom._get_star_list_path())
  
        pl.scatter(star_list[:,0], star_list[:,1])
        pl.show()
       
    def show_detected_cosmic_rays(self, camera_number, frame_nb):
        """Get the position of the detected cosmic rays and diplay it
        over each frame of the concerned data cube using ds9.

        :param camera_number: The number of the camera to analyse
          (must be 1 or 2)

        .. seealso:: :py:meth:`orbs.Orbs.compute_cosmic_ray_map`
        """
        cube = self._orbs._init_raw_data_cube(camera_number)
        frame = cube.get_data_frame(frame_nb).transpose()
        cr_list = np.nonzero(self.read_fits(cube._get_cr_map_frame_path(frame_nb)))
        cr_final_list = list()
        for icr in range(len(cr_list[0])):
            cr_final_list.append((cr_list[0][icr], cr_list[1][icr]))    
        self._graph.pop_frame(frame)
        self._graph.pop_stars(np.array(cr_final_list))

    def show_alignment_quality(self):
        """Compare the fitted position of the stars in a deep frame
        from the corrected interferogram of the first camera and a
        deep frame from the transformed interferogram of the second
        camera. Plot the position shift in a graph to measure the
        quality of the alignement between the two cubes.

        .. seealso:: :py:meth:`orbs.Orbs.transform_cube_B`
        """
        
        cube1 = self._orbs._init_raw_data_cube(1)
        self._astrom1 = self._orbs._init_astrometry(cube1, 1)
        star_list_path, self._mean_fwhm = self._astrom1.detect_stars(
            min_star_number=self.MIN_STAR_NB, no_save=True)
        star_list_A = self._astrom1.load_star_list(star_list_path)
        
        image_list_path_1 = cube1._get_interfero_list_path()
        cube1 = Cube(image_list_path_1)
        interf_frame_A = cube1.get_mean_image()
        
        
        star_list_A = orb.astrometry.fit_stars_in_frame(
            interf_frame_A, star_list_A,
            int(self._mean_fwhm * self._astrom1.box_size_coeff)).get_star_list()

        cube2 = InterferogramMerger(
            None, None, None, 
            data_prefix=self._orbs._get_data_prefix(0))
        image_list_path_2 = (
            cube2._get_transformed_interfero_frame_list_path())
        cube2 = Cube(image_list_path_2)
        interf_frame_B = cube2.get_mean_image()
        
        star_fit_B = orb.astrometry.fit_stars_in_frame(
            interf_frame_B, star_list_A,
            int(self._mean_fwhm * self._astrom1.box_size_coeff))
        star_distance = np.array([[star_fit_B[istar,'dx'],
                                   star_fit_B[istar,'dy']]
                                  for istar in range(len(star_list_A))])
        star_error= np.array([[star_fit_B[istar,'x_err'],
                               star_fit_B[istar,'y_err']]
                              for istar in range(len(star_list_A))])
        
        # arc-sec conversion
        star_distance[:,0] = self._astrom1.pix2arc(star_distance[:,0])
        star_distance[:,1] = self._astrom1.pix2arc(star_distance[:,1])
        star_error[:,0] = self._astrom1.pix2arc(star_error[:,0])
        star_error[:,1] = self._astrom1.pix2arc(star_error[:,1])
       
        mean_distance = orb.utils.robust_median(
            np.sqrt(star_distance[:,0]**2 + star_distance[:,1]**2))
        ## mean_center_x = orb.utils.robust_mean(
        ##     star_distance[:,0])
        ## mean_center_y = orb.utils.robust_mean(
        ##     star_distance[:,1])
        mean_center_x = 0.
        mean_center_y = 0.
        
        self._graph.pop_scatter(
            star_distance,
            circle=(([0.,0.], (self._mean_fwhm / 2.), "Stars FWHM", 'g'),
                    ([mean_center_x, mean_center_y], mean_distance, "Mean distance", 'r')),
            xlabel="X shift (in arcseconds)",
            ylabel="Y shift (in arcseconds)",
            title="Position difference for each star",
            xlim=[-self._mean_fwhm / 2.,self._mean_fwhm / 2.],
            ylim=[-self._mean_fwhm / 2.,self._mean_fwhm/ 2.],
            a_err=star_error)
        
####################################################
############ Graph class ###########################
####################################################
        
class Graph(Tools):
    """
    Graph class is used to display the informations collected by
    :py:class:`orbscheck.OrbsCheck`.
    """

    FONTSIZE = 14 # Default font size
    LINEWIDTH = 1.5 # Default line width in graph
    _last_fig_index = None
    _ds9 = None # ds9 instance
    _nods9 = None # If True ds9 interface will no be used

    def __init__(self):
        """Initialize :py:class:`orbscheck.Graph`. Load ds9.
        """
        self._last_fig_index = 0

        
    def pop_plot(self, y, x=None, xlabel=None, ylabel=None,
                 title=None, yerr=None, ylim=None):
        """Plot an array using :py:meth:`pylab.plot` in a new window.

        :param y: The array to display. If no x array is given, assume
          an x array like np.arange(y.shape[0]).
        :param x: (Optional) x array.
        :param xlabel: (Optional) Label for the x axis (default None)
        :param ylabel: (Optional) Label for the y axis (default None)
        :param title: (Optional) Title of the plot to display (default
          None)
          
        :param ylim: (Optional) Set limit on y scale (must be a tuple
          [ymin,ymax])
        """
        pl.figure(self._last_fig_index, figsize=(15,7))
        if len(y.shape) > 1:
            nb = y.shape[1]
        else:
            nb = 1
        for iy in range(nb):
            if nb > 1:
                yi = y[:,iy]
                yerri = yerr[:,iy]
            else:
                yi = y
                yerri = yerr
                
            if x == None:
                pl.errorbar(np.arange(yi.shape[0]), yi, yerr=yerri,
                            linewidth=self.LINEWIDTH, color=str(iy/float(nb)))
                pl.xlim([0, yi.shape[0]])
            else:
                pl.errorbar(x,y, linewidth=self.LINEWIDTH, yerr=yerr,
                            color=str(iy/float(nb)))
                pl.xlim([np.nanmin(x), np.nanmax(x)])
                
        if xlabel != None:
            pl.xlabel(xlabel, fontsize = self.FONTSIZE)
        if ylabel != None:
            pl.ylabel(ylabel, fontsize = self.FONTSIZE)
        pl.grid()
        if title != None:
            pl.title(title, fontsize = self.FONTSIZE + 2)
        if ylim != None:
            pl.ylim(ylim)

        

        pl.show()
        self._last_fig_index += 1
        return self._last_fig_index - 1

    def pop_scatter(self, a, a_err=None, xlabel=None, ylabel=None,
                    title=None, xlim=None, ylim=None, circle=None):
        """Plot an scatter graph using :py:meth:`pylab.scatter` in a
        new window.

        :param a: The array to display. The first column is assumed to
          give the x coordinates. The second column is assumed to give
          the y coordinates.
          
        :param circle: (Optional) Add circles to the plot. Must be a
          tuple of parameters (([x1,y1], radius1, label1, color1),
          ([x2,y2], radius2, label2, color2), ...).
          
        :param xlabel: (Optional) Label for the x axis (default None)
        :param ylabel: (Optional) Label for the y axis (default None)
        :param title: (Optional) Title of the plot to display (default
          None)
        :param xlim: (Optional) Limits for the x axis display (default
          None). Must be an array [x_min, x_max]
        :param ylim: (Optional) Limits for the y axis display (default
          None). Must be an array [y_min, y_max]
        """
        pl.figure(self._last_fig_index)
        for iscat in range(a.shape[0]):
            if a_err is None:
                pl.scatter(a[iscat,0], a[iscat,1], linewidth=self.LINEWIDTH)
            else:
                pl.errorbar(a[iscat,0], a[iscat,1], a_err[iscat,0], a_err[iscat,1], linewidth=self.LINEWIDTH, color='0.')

        if circle != None:
            for icircle in circle:
                circ=pl.Circle(icircle[0], radius=icircle[1],
                               fill=False, label=icircle[2],
                               color=icircle[3], linewidth=self.LINEWIDTH)
                ax=pl.gca()
                ax.add_patch(circ)
            
        if xlim != None:
            pl.xlim(xlim)
        if ylim != None:
            pl.ylim(ylim)
        pl.grid()
        if xlabel != None:
            pl.xlabel(xlabel, fontsize = self.FONTSIZE)
        if ylabel != None:
            pl.ylabel(ylabel, fontsize = self.FONTSIZE)
        if title != None:
            pl.title(title, fontsize = self.FONTSIZE + 2)
        pl.legend()
        pl.axes().set_aspect('equal')
        pl.show()

        self._last_fig_index += 1
        return self._last_fig_index - 1

        

####################################################
############ OrbsCheckGui class ####################
####################################################
        
class OrbsCheckGui(OrbsCheck):


    boxcams_camera = 1 # camera number
    boxmerged_camera = 0 # camera number
    

    def __init__(self, option_file_path, mode):
        OrbsCheck.__init__(self, option_file_path, mode)
        

        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.connect('destroy', self.destroy)
        self.window.set_border_width(10)
        
        boxcams = gtk.VBox()
        liststore = gtk.ListStore(gobject.TYPE_STRING)
        camchooser = gtk.ComboBox(liststore)
        cell = gtk.CellRendererText()
        camchooser.pack_start(cell, True)
        camchooser.add_attribute(cell, 'text', 0)
        camchooser.append_text('CAM1')
        camchooser.append_text('CAM2')
        camchooser.connect('changed', self._set_boxcams_camera_cb)
        camchooser.set_active(0)
        boxcams.pack_start(camchooser)

        def add_button(name, box, cb, *args):
            button = gtk.Button(name)
            button.connect('clicked', cb, *args)
            box.pack_start(button)

        add_button('Alignement Vector', boxcams, self._show_alignment_vector_cb)
        add_button('Detected stars', boxcams, self._show_detected_stars_cb)
       
        boxmerged = gtk.VBox()
        liststore = gtk.ListStore(gobject.TYPE_STRING)
        camchooser = gtk.ComboBox(liststore)
        cell = gtk.CellRendererText()
        camchooser.pack_start(cell, True)
        camchooser.add_attribute(cell, 'text', 0)
        camchooser.append_text('MERGED')
        camchooser.append_text('CAM1')
        camchooser.append_text('CAM2')
        camchooser.connect('changed', self._set_boxmerged_camera_cb)
        camchooser.set_active(0)
        boxmerged.pack_start(camchooser)
        add_button('Transmission', boxmerged, self._show_transmission_vector_cb)
        add_button('External Illumination', boxmerged, self._show_ext_illumination_vector_cb)
        add_button('Stray Light', boxmerged, self._show_stray_light_vector_cb)


        box = gtk.VBox()
        frame_cams = gtk.Frame('Independant correction')
        frame_cams.add(boxcams)
        frame_merged = gtk.Frame('Merging')
        frame_merged.add(boxmerged)
        box.pack_start(frame_cams)
        box.pack_start(frame_merged)
        
        
        self.window.add(box)
        self.window.show_all()
        

    def _show_transmission_vector_cb(self, w):
        self.show_transmission_vector(self.boxmerged_camera)

    def _show_stray_light_vector_cb(self, w):
        self.show_stray_light_vector(self.boxmerged_camera)

    def _show_ext_illumination_vector_cb(self, w):
        self.show_ext_illumination_vector()

    def _show_alignment_vector_cb(self, w):
        self.show_alignment_vector(self.boxcams_camera)

    def _show_detected_stars_cb(self, w):
        self.show_detected_stars(self.boxcams_camera)
        
    def _set_boxcams_camera_cb(self, w):
        val = w.get_active_text()
        if val == 'CAM1': self.boxcams_camera = 1
        elif val == 'CAM2': self.boxcams_camera = 2
        else: raise Exception("Text must be 'CAM1' or 'CAM2'")

    def _set_boxmerged_camera_cb(self, w):
        val = w.get_active_text()
        self.boxmerged_camera = val

    def destroy(self, widget, data=None):
        gtk.main_quit()
        
####################################################
############ MAIN ##################################
####################################################

if __name__ == "__main__":
    
    parser = ArgumentParser(
        version=('ORBS-version: {}, ORB-version: {}'.format(
            orbs.version.__version__, orb.core.__version__)))

    parser.add_argument('option_file_path',
                        action='store',
                        help="Path to the option file (can be a SITELLE job file).")

    parser.add_argument('--mode',
                        dest='mode',
                        action='store',
                        default='spiomm',
                        choices=['sitelle', 'spiomm'],
                        help="Instrument mode: can be 'sitelle' or 'spiomm'")
    
    args = parser.parse_args()
    # GUI
    orbscheck_gui = OrbsCheckGui(args.option_file_path, args.mode)
    gtk.main()
