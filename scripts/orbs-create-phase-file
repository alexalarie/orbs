#!/usr/bin/python
# *-* coding: utf-8 *-*
# Author: Thomas Martin <thomas.martin.1@ulaval.ca>
# File: orbs-create-phase-file

## Copyright (c) 2010-2017 Thomas Martin <thomas.martin.1@ulaval.ca>
##
## This file is part of ORBS
##
## ORBS is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## ORBS is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
## or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
## License for more details.
##
## You should have received a copy of the GNU General Public License
## along with ORBS.  If not, see <http://www.gnu.org/licenses/>.

####################################################
############ ORBS CREATE PHASE FILE ################
####################################################

## Create a phase file from the binned phase cube created when
## computing phase maps

import os
import numpy as np
import pylab as pl
import logging

import argparse
from argparse import ArgumentParser

import orb.core, orbs.version
import orb.utils.io
import orb.fft
from orb.core import Tools, Logger
from orb.core import OptionFile, ProgressBar
from orbs.orbs import Orbs, JobFile
from orbs.process import Interferogram
import orbs.phase


def check_option_file(path):
    """Check the option file type.

    If the option file is a job file for SITELLE, parse the file
    and create an option file readable by ORBS.

    :param to: an orb.Tools instance
    :param path: path of the option file to check
    :param is_laser: If True, the target is a laser cube.
    :param fast_init: If True init is fast ans some checking is not done
    """
    jobfile = JobFile(path, fast_init=True)
    if jobfile.is_jobfile():
        return jobfile.convert2opt()
    else:
        return path, dict(), 'option_file'


    
def main(args):
    
    if args.camera == 1:
        cams = 'single1'
        cam = 'cam1'
        
    elif args.camera == 2:
        raise NotImplementedError('not implemented. use --cam 1 instead')
        cams = 'single2'
        cam = 'cam2'
    else:
        raise NotImplementedError('not implemented. use --cam 1 instead')
        cams = 'full'
        cam = 'merged'


    option_file_path = check_option_file(args.option_file_path)
    project = Orbs(option_file_path[0], 'object', cams,
                   instrument=args.instrument_mode,
                   silent=False, fast_init=False,
                   raw_data_files_check=False)


    # create phase cube
    interfero_cube_path = project._get_interfero_cube_path(
        args.camera, corrected=False)        
            
    cube = Interferogram(
        interfero_cube_path,
            params=project.options,
            config=project.config,
            silent_init=True,
            instrument=project.instrument,
            overwrite=True,
            indexer=project.indexer,
            project_header = project._get_project_fits_header(
                args.camera),
            data_prefix=project._get_data_prefix(args.camera))

    if args.instrument_mode == 'sitelle': binning = 6
    else: binning = 3
        
    cube.create_binned_interferogram_cube(binning)
    
    return

    interferogram_cube = orbs.phase.BinnedInterferogramCube(
        interfero_cube_path, project.options, instrument=project.instrument,
        data_prefix=project._get_data_prefix(args.camera),
        overwrite=True, config=project.config)

    phase_cube_path =  interferogram_cube._data_path_hdr + 'binned_phase_cube.fits'

    #phase_cube = interferogram_cube.compute_phase()
    #orb.utils.io.write_fits(phase_cube_path, phase_cube, overwrite=True)

    phase_cube = orbs.phase.BinnedPhaseCube(
        phase_cube_path,
        project.options, instrument=project.instrument,
        data_prefix=project._get_data_prefix(args.camera),
        overwrite=True, config=project.config)

    # iterative polynomial fit

    #phase_maps_path = phase_cube.iterative_polyfit(2, suffix='phase_file')
    phase_maps_path = './flats_SN2/CAM1/flats_SN2.cam1.BinnedPhaseCube.phase_maps.iter.phase_file.0.hdf5'
    phasemaps = orbs.phase.PhaseMaps(phase_maps_path)

    phasemaps.modelize()
    phase_cube_model_path =  phase_cube._data_path_hdr + 'binned_phase_cube_model.fits'
    #phasemaps.generate_phase_cube(phase_cube_model_path, coeffs=(None, None, 0))

    # get high order residual

    phase_cube_model = orb.utils.io.read_fits(phase_cube_model_path)
    phase_cube_residual = orb.utils.io.read_fits(phase_cube_path) - phase_cube_model
    
    high_order_phase = np.nanmean(np.nanmean(phase_cube_residual, axis=0), axis=0)

    
    # write high order phase file

    high_order_phase = orb.fft.Phase(high_order_phase, phase_cube.get_base_axis(),
                                     params=phase_cube.params)
    
    high_order_phase = high_order_phase.cleaned()

    # clean high order phase from low orders
    hop_corr = high_order_phase.data - high_order_phase.polyfit(1).data
    
    high_order_phase_path = phase_cube._data_path_hdr + 'high_order_phase.fits'
    orb.utils.io.write_fits(high_order_phase_path,
                            np.array([hop_corr, high_order_phase.axis.data]),
                            overwrite=True)
    
            
    if args.plot:
        pl.plot(high_order_phase.axis.data,
                hop_corr,
                label='High Order phase')
        pl.ylabel('Phase (rad)')
        pl.xlabel('Wavenumber (cm-1)')

        pl.legend()
        pl.grid()
        pl.tight_layout()
        pl.show()

    

if __name__ == "__main__":
    """Main entrance of the script.
    
    Parse arguments and launch the process.
    """
    parser = ArgumentParser(
        version=('ORBS-version: {}, ORB-version: {}'.format(
            orbs.version.__version__, orb.core.__version__)),
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="Create a phase file from a reduced phase cube")

    parser.add_argument('instrument_mode',
                        action='store',
                        choices=['sitelle', 'spiomm'],
                        help='Instrument mode')

    parser.add_argument('option_file_path',
                        action='store',
                        help='Path to the option file')

    parser.add_argument('--cam',
                        dest='camera',
                        type=int,
                        action='store',
                        default=1,
                        choices=[0,1,2],
                        help='Camera number (default 0)')

    parser.add_argument('--plot',
                        dest='plot',
                        action='store_true',
                        default=False,
                        help='Plot final phase vector')

    parser.add_argument(
        '--debug', dest='debug', action='store_true',
        default=False,
        help="Turn on debug mode (logging messages displayed on screen are more informative)")

    args = parser.parse_args()


    # start and config logging
    try:
        logger = Logger(debug = args.debug)
    except AttributeError:
        logger = Logger(debug=False)

    
    main(args)
