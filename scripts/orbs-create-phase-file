#!/usr/bin/python
# *-* coding: utf-8 *-*
# Author: Thomas Martin <thomas.martin.1@ulaval.ca>
# File: orbs-create-phase-file

## Copyright (c) 2010-2017 Thomas Martin <thomas.martin.1@ulaval.ca>
##
## This file is part of ORBS
##
## ORBS is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## ORBS is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
## or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
## License for more details.
##
## You should have received a copy of the GNU General Public License
## along with ORBS.  If not, see <http://www.gnu.org/licenses/>.

####################################################
############ ORBS CREATE PHASE FILE ################
####################################################

## Create a phase file from the binned phase cube created when
## computing phase maps

import argparse
from argparse import ArgumentParser
import orb.core, orbs.version
import orb.utils.io
import orb.utils.spectrum
import orb.utils.vector
import orb.utils.image
import orb.utils.filters
from orb.core import Tools, PhaseFile
from orb.core import OptionFile, ProgressBar
from orbs.orbs import Orbs, JobFile
import os
import numpy as np
import pylab as pl
import scipy.interpolate


def check_option_file(path):
    """Check the option file type.

    If the option file is a job file for SITELLE, parse the file
    and create an option file readable by ORBS.

    :param to: an orb.Tools instance
    :param path: path of the option file to check
    :param is_laser: If True, the target is a laser cube.
    :param fast_init: If True init is fast ans some checking is not done
    """
    jobfile = JobFile(path, fast_init=True)
    if jobfile.is_jobfile():
        return jobfile.convert2opt()
    else:
        return path, dict(), 'option_file'


    
def main(args):


    if args.instrument_mode == 'sitelle':
        config_file_name = 'config.sitelle.orb'
    if args.instrument_mode == 'spiomm':
        config_file_name = 'config.spiomm.orb'

    if args.camera == 1:
        cams = 'single1'
        cam = 'cam1'
        
    elif args.camera == 2:
        cams = 'single2'
        cam = 'cam2'
    else:
        cams = 'full'
        cam = 'merged'


    option_file_path = check_option_file(args.option_file_path)
    project = Orbs(option_file_path[0], 'object', cams,
                   silent=True, fast_init=True,
                   config_file_name=config_file_name,
                   raw_data_files_check=False)

    return
    # write output
    phf = PhaseFile(project.options["filter_name"])
    phf.write_improved_phase_file(
        step, order, angles, phases, phases_err_min, phases_err_max)
        
    if args.plot:
        
        
        cm1_axis_base_spectrum = np.copy(cm1_axis_base)
        ax = pl.subplot(211)
        ax2 = pl.subplot(212)
        axis = orb.utils.spectrum.cm12nm(cm1_axis_base)
        axis_spectrum = orb.utils.spectrum.cm12nm(cm1_axis_base_spectrum)
        ax2.plot(axis_spectrum, spectrum / np.nanmax(spectrum), label='Spectrum', c='0.5')
        ax2.set_ylabel('Spectrum normalized amplitude')
        ax2.legend()
        ax2.set_xlabel('Wavelength (nm)')
        ax2.set_xlim([np.nanmin(axis_spectrum), np.nanmax(axis_spectrum)])


        iang = len(angles)/2
        cm1_axis_phase = orb.utils.spectrum.create_cm1_axis(
            dimz, step, order,
            corr=angles[iang] / nm_laser)


        print angles[iang],base_calib
        iphase = phases[iang] + 0.2
        iphase = orb.utils.vector.interpolate_axis(
            iphase, cm1_axis_base, 1, old_axis=cm1_axis_phase)
        phase_err_min = phases_err_min[iang]
        phase_err_max = phases_err_max[iang]
        phase_err_min = orb.utils.vector.interpolate_axis(
            phase_err_min,cm1_axis_base,1,old_axis=cm1_axis_phase)
        phase_err_max = orb.utils.vector.interpolate_axis(
            phase_err_max,cm1_axis_base,1,old_axis=cm1_axis_phase)

        ax.fill_between(axis,
                        iphase - phase_err_min,
                        iphase + phase_err_max,
                        facecolor='0.5',linewidth=0., alpha=0.5)
        ax.plot(axis, iphase, c='red', linewidth=3.,
                label='Median Phase')
        ax.set_ylabel('Phase (radians)')
        ax.legend()
        ax.grid()
        ax.set_xlim([np.nanmin(axis_spectrum), np.nanmax(axis_spectrum)])
        pl.tight_layout()
        pl.show()

    

if __name__ == "__main__":
    """Main entrance of the script.
    
    Parse arguments and launch the process.
    """
    parser = ArgumentParser(
        version=('ORBS-version: {}, ORB-version: {}'.format(
            orbs.version.__version__, orb.core.__version__)),
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="Create a phase file from a reduced phase cube")

    parser.add_argument('instrument_mode',
                        action='store',
                        choices=['sitelle', 'spiomm'],
                        help='Instrument mode')

    parser.add_argument('option_file_path',
                        action='store',
                        help='Path to the option file')

    parser.add_argument('--cam',
                        dest='camera',
                        type=int,
                        action='store',
                        default=0,
                        choices=[0,1,2],
                        help='Camera number (default 0)')

    parser.add_argument('--plot',
                        dest='plot',
                        action='store_true',
                        default=False,
                        help='Plot final phase vector')


    args = parser.parse_args()

    main(args)
