#!/usr/bin/python
# *-* coding: utf-8 *-*
# Author: Thomas Martin <thomas.martin.1@ulaval.ca>
# File: orbs-check-standard-spectrum

## Copyright (c) 2010-2015 Thomas Martin <thomas.martin.1@ulaval.ca>
##
## This file is part of ORBS
##
## ORBS is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## ORBS is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
## or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
## License for more details.
##
## You should have received a copy of the GNU General Public License
## along with ORBS.  If not, see <http://www.gnu.org/licenses/>.

####################################################
######### ORBS CHECK STANDARD SPECTRUM #############
####################################################

## Plot the computed standard spectrum for checking purpose

import argparse
from argparse import ArgumentParser
import orb.core, orbs.version
import orb.utils.io
import orb.utils.spectrum
import orb.utils.vector
import orb.utils.image
import orb.utils.filters
from orb.core import OptionFile, ProgressBar, Standard
from orbs.orbs import Orbs
import os
import numpy as np
import pylab as pl
import scipy.interpolate
import pylab as pl

def main(args):

    data, hdr = orb.utils.io.read_fits(args.standard_file_path,
                                       return_header=True)
    
    std = Standard(hdr['OBJECT'])
    step = hdr['STEP']
    order = hdr['ORDER']
    corr = hdr['AXCORR0']

    if hdr['WAVTYPE'] == 'WAVELENGTH':
        wavenumber = False
    else:
        wavenumber = True

    real_axis, real_spectrum = std.get_spectrum(
        step, order, data.shape[0],
        wavenumber=wavenumber, corr=corr)

    obs_axis, obs_spectrum = data[:,1], data[:,0]

    fig, ax1 = pl.subplots()
    
    ax1.plot(orb.utils.spectrum.cm12nm(real_axis),
            real_spectrum,
            linewidth=2., color='red', label='Real spectrum')
    ax1.set_xlabel('Wavelength in nm')
    ax1.set_ylabel('Flux in erg/cm2/s/A', color='red')
    ax1.set_ylim((0, np.nanmax(real_spectrum)))
    
    ax2 = ax1.twinx()
    ax2.plot(orb.utils.spectrum.cm12nm(obs_axis),
            obs_spectrum,
            linewidth=2, color='0', label='Observed spectrum')
    ax2.set_ylabel('Flux in ADU')
    ax2.set_ylim((0, np.nanmax(obs_spectrum)))
    
   
    pl.grid()
    pl.tight_layout()
    pl.show()
    



if __name__ == "__main__":
    """Main entrance of the script.
    
    Parse arguments and launch the process.
    """
    parser = ArgumentParser(
        version=('ORBS-version: {}, ORB-version: {}'.format(
            orbs.version.__version__, orb.core.__version__)),
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="Create a phase file from a binned phase cube")

    parser.add_argument('standard_file_path',
                        action='store',
                        help='Path to the standard spectrum file')

    args = parser.parse_args()

    main(args)
