#!/usr/bin/python
# *-* coding: utf-8 *-*
# Author: Thomas Martin <thomas.martin.1@ulaval.ca>

import sys, os
import getopt
import Tkinter, tkFileDialog
import Pmw # ubuntu package python-pmw
import ImageTk

# Defining the path to script dir module from script location
script_dir = os.path.dirname(os.path.realpath(__file__)).split()[0] + os.sep

# Path to Orbs
orbs_dir = os.path.normpath(os.path.join(script_dir, './../'))
sys.path.append(orbs_dir)

from orb.core import Tools

def get_std_list(group):
    std_list = Tools()._get_standard_list(group=group)
    std_list.append('None')
    return std_list


class OptCreator(Tkinter.Frame):

    _logo_path = os.path.join(script_dir, 'logo.png')

    object_name = ""
    bin_cam1 = ""
    bin_cam2 = ""
    step = ""
    step_nb = ""
    order = ""
    exp_time = ""
    dark_time = ""
    obs_date = ""
    bad_frames = ""
    target_ra = ""
    target_dec = ""
    target_x = ""
    target_y = ""
    std_path = ""
    phase_path = ""
    
    filters = ['SPIOMM_R', 'SPIOMM_R2', 'SPIOMM_B', 'SPIOMM_Bb',
               "SPIOMM_u'", 'SPIOMM_V', "SPIOMM_g'", 'SPIOMM_SII',
               'NO_FILTER']
    standards = get_std_list(None)
    
    cam1_dir = ""
    cam2_dir = ""
    bias1_dir = ""
    bias2_dir = ""
    dark1_dir = ""
    dark2_dir = ""
    flat1_dir = ""
    flat2_dir = ""
    calib1_dir = ""
    calib2_dir = ""

    other_keywords = ""
    
    def __init__(self, root):

        Tkinter.Frame.__init__(self, root)
        root.resizable(False,False)
        # define commands
        fcam1 = lambda: self.askdir("CAM1")
        fcam2 = lambda: self.askdir("CAM2")
        fbias1 = lambda: self.askdir("BIAS1")
        fbias2 = lambda: self.askdir("BIAS2")
        fdark1 = lambda: self.askdir("DARK1")
        fdark2 = lambda: self.askdir("DARK2")
        fflat1 = lambda: self.askdir("FLAT1")
        fflat2 = lambda: self.askdir("FLAT2")
        fcalib1 = lambda: self.askdir("CALIB1")
        fcalib2 = lambda: self.askdir("CALIB2")
        fstd = lambda: self.askfile("STD")
        fphase = lambda: self.askfile("PHASE")

        # Display logo
        image = ImageTk.PhotoImage(file=self._logo_path)
        label = Tkinter.Label(root, image=image)
        label.image = image
        label.grid(row=0, column=0, columnspan=1, rowspan=10, padx=5)

        # Project
        Tkinter.Label(root, text="Project name").grid(
            column=1, row=0, sticky=Tkinter.W)
        self.eproject = Tkinter.Entry(root)
        self.eproject.grid(column=2, row=0, ipady=4)

        # Filter
        Tkinter.Label(root, text="Filter name").grid(
            column=1, row=1, sticky=Tkinter.W)
        self.filter_name = Tkinter.StringVar(root)
        self.filter_name.set('SPIOMM_R') # initial value
        self.efilter = Tkinter.OptionMenu(root, self.filter_name, *self.filters)
        self.efilter.grid(column=2, row=1, sticky=Tkinter.W)
        
        # Binning camera 1
        Tkinter.Label(root, text="Binning camera 1").grid(
            column=1, row=2, sticky=Tkinter.W)
        self.ebin1 = Tkinter.Entry(root)
        self.ebin1.grid(column=2, row=2, ipady=4)
     
        # Binning camera 2
        Tkinter.Label(root, text="Binning camera 2").grid(
            column=1, row=3, sticky=Tkinter.W)
        self.ebin2 = Tkinter.Entry(root)
        self.ebin2.grid(column=2, row=3, ipady=4)
 
        # Step
        Tkinter.Label(root, text="Step size (in nm)").grid(
            column=1, row=4, sticky=Tkinter.W)
        self.estep = Tkinter.Entry(root)
        self.estep.grid(column=2, row=4, ipady=4)
      
        # Step number
        Tkinter.Label(root, text="Number of steps").grid(
            column=1, row=5, sticky=Tkinter.W)
        self.estnb = Tkinter.Entry(root)
        self.estnb.grid(column=2, row=5, ipady=4)
   
        # Folding order
        Tkinter.Label(root, text="Folding order").grid(
            column=1, row=6, sticky=Tkinter.W)
        self.eorder = Tkinter.Entry(root)
        self.eorder.grid(column=2, row=6, ipady=4)
       
        # Exposition time
        Tkinter.Label(root, text="Exposition time (in s)").grid(
            column=1, row=7, sticky=Tkinter.W)
        self.eexpt = Tkinter.Entry(root)
        self.eexpt.grid(column=2, row=7, ipady=4)
  
        # Darks exposition time
        Tkinter.Label(root, text="Darks exposition time (in s)").grid(
            column=1, row=8, sticky=Tkinter.W)
        self.edart = Tkinter.Entry(root)
        self.edart.grid(column=2, row=8, ipady=4)
 
        # Observation date
        Tkinter.Label(root, text="Observation date (YYYY-MM-DD)", justify=Tkinter.LEFT).grid(
            column=1, row=9, sticky=Tkinter.W)
        self.eobsd = Tkinter.Entry(root)
        self.eobsd.grid(column=2, row=9, ipady=4)
       
        # Bad frames
        Tkinter.Label(root, text="Bad frames", justify=Tkinter.LEFT).grid(
            column=1, row=10, sticky=Tkinter.W)
        self.ebadf = Tkinter.Entry(root)
        self.ebadf.grid(column=2, row=10, ipady=4)


        # CAMERA 1 Folders
        Tkinter.Label(text='CAMERA 1').grid(
            column=3, row=0)
        self.bcam1 = Tkinter.Button(root, text='Images 1', command=fcam1,
                                    width=10)
        self.bcam1.grid(column=3, row=1)
        self.bbias1 = Tkinter.Button(root, text='Bias 1', command=fbias1, 
                                    width=10)
        self.bbias1.grid(column=3, row=2)
        self.bdark1 = Tkinter.Button(root, text='Dark 1', command=fdark1, 
                                    width=10)
        self.bdark1.grid(column=3, row=3)
        self.bflat1 = Tkinter.Button(root, text='Flat 1', command=fflat1, 
                                    width=10)
        self.bflat1.grid(column=3, row=4)
        self.bcalib1 = Tkinter.Button(root, text='Calib 1', command=fcalib1, 
                                    width=10)
        self.bcalib1.grid(column=3, row=5)
        
        # CAMERA 2 Folders
        Tkinter.Label(text='CAMERA 2').grid(
            column=4, row=0)
        self.bcam2 = Tkinter.Button(root, text='Images 2', command=fcam2,
                                    width=10)
        self.bcam2.grid(column=4, row=1)
        self.bbias2 = Tkinter.Button(root, text='Bias 2', command=fbias2, 
                                    width=10)
        self.bbias2.grid(column=4, row=2)
        self.bdark2 = Tkinter.Button(root, text='Dark 2', command=fdark2, 
                                    width=10)
        self.bdark2.grid(column=4, row=3)
        self.bflat2 = Tkinter.Button(root, text='Flat 2', command=fflat2, 
                                    width=10)
        self.bflat2.grid(column=4, row=4)
        self.bcalib2 = Tkinter.Button(root, text='Calib 2', command=fcalib2, 
                                    width=10)
        self.bcalib2.grid(column=4, row=5)

        # OTHER KEYWORDS ENTRIES
        self.ekeys = Tkinter.Text(root, width=30, height=7)
        self.ekeys.grid(column=3, row=6, columnspan=2, rowspan=4)
        self.ekeys.insert(Tkinter.INSERT, '# SPECIAL KEYWORDS\n')

        # WCS parameters
        Tkinter.Label(root, text="WCS PARAMETERS", justify=Tkinter.LEFT).grid(
             column=5, row=0, sticky=Tkinter.W)
        
        # Target RA
        Tkinter.Label(root, text="Target RA [h:m:s]", justify=Tkinter.LEFT).grid(
            column=5, row=1, sticky=Tkinter.W)
        self.etargra = Tkinter.Entry(root)
        self.etargra.grid(column=6, row=1, ipady=4)

        # Target DEC
        Tkinter.Label(root, text="Target DEC [d:m:s]", justify=Tkinter.LEFT).grid(
            column=5, row=2, sticky=Tkinter.W)
        self.etargdec = Tkinter.Entry(root)
        self.etargdec.grid(column=6, row=2, ipady=4)

        # Target X
        Tkinter.Label(root, text="Target X", justify=Tkinter.LEFT).grid(
            column=5, row=3, sticky=Tkinter.W)
        self.etargx = Tkinter.Entry(root)
        self.etargx.grid(column=6, row=3, ipady=4)

        # Target Y
        Tkinter.Label(root, text="Target Y", justify=Tkinter.LEFT).grid(
            column=5, row=4, sticky=Tkinter.W)
        self.etargy = Tkinter.Entry(root)
        self.etargy.grid(column=6, row=4, ipady=4)

        # Standard
        Tkinter.Label(text='STANDARD').grid(
            column=5, row=5)
        self.bstd = Tkinter.Button(root, text='Standard Path', command=fstd,
                                   width=10)
        self.bstd.grid(column=5, row=6)

        group_list = ['MASSEY', 'CALSPEC', 'MISC']
        self.std_group = Tkinter.StringVar(root)
        self.std_group.set('CALSPEC') # initial value
        self.estdgroup = Tkinter.OptionMenu(root, self.std_group,
                                            *group_list,
                                            command = self._select_std)
        self.estdgroup.grid(column=6, row=6, sticky=Tkinter.W)
        
        self.std_name = Tkinter.StringVar(root)
        self.std_name.set('None') # initial value
        self.estdname = Pmw.OptionMenu(root,
                                       menubutton_textvariable=self.std_name,
                                       items = get_std_list(
                                           self.std_group.get()))
        self.estdname.grid(column=6, row=7, sticky=Tkinter.W)

       
        # Phase Map
        Tkinter.Label(text='PHASE MAP').grid(
            column=5, row=8)
        self.bphase = Tkinter.Button(root, text='Phase Map Path',
                                     command=fphase,
                                     width=10)
        self.bphase.grid(column=5, row=9)
        
        # Load and Save buttons
        Tkinter.Button(root, text='LOAD', 
                       command=self.load, width=10).grid(column=3, row=10)
        Tkinter.Button(root, text='SAVE',
                       command=self.saveas, width=10).grid(column=4, row=10)


        # define options for opening or saving a file
        self.file_opt = file_options = {}
        file_options['initialdir'] = os.curdir
        file_options['initialfile'] = 'options.opt'
        file_options['parent'] = root

        # defining options for opening a directory
        self.dir_opt = dir_options = {}
        dir_options['initialdir'] = os.curdir
        dir_options['mustexist'] = True
        dir_options['parent'] = root

        self.init_dir = os.curdir


    def askfile(self, kind):
        """Return a file path using a GUI"""
        
        if kind == "STD":
            if self.std_path != "":
                self.file_opt['initialdir'] = os.path.dirname(self.std_path)
            filename = tkFileDialog.askopenfilename(**self.file_opt)
            if len(filename) > 2:
                self.bstd.configure(bg = "Green")
                self.std_path = filename
            
        if kind == "PHASE":
            if self.phase_path != "":
                self.file_opt['initialdir'] = os.path.dirname(self.phase_path)
            filename = tkFileDialog.askopenfilename(**self.file_opt)
            if len(filename) > 2:
                self.bphase.configure(bg = "Green")
                self.phase_path = filename
                
        self.file_opt['initialdir'] = os.curdir
    
    def askdir(self, kind):
        """Return a folder path using a GUI"""
        self.dir_opt['initialdir'] = self.init_dir

        if kind == "CAM1": 
            if self.cam1_dir != "": self.dir_opt['initialdir'] = self.cam1_dir
            dirname = tkFileDialog.askdirectory(**self.dir_opt)
            if len(dirname) > 2:
                self.bcam1.configure(bg = "Green")
                self.cam1_dir = dirname
        if kind == "CAM2":
            if self.cam2_dir != "": self.dir_opt['initialdir'] = self.cam2_dir
            dirname = tkFileDialog.askdirectory(**self.dir_opt)
            if len(dirname) > 2:
                self.bcam2.configure(bg = "Green")
                self.cam2_dir = dirname
        if kind == "BIAS1":
            if self.bias1_dir != "": self.dir_opt['initialdir'] = self.bias1_dir
            dirname = tkFileDialog.askdirectory(**self.dir_opt)
            if len(dirname) > 2:
                self.bbias1.configure(bg = "Green")
                self.bias1_dir = dirname
        if kind == "BIAS2":
            if self.bias2_dir != "": self.dir_opt['initialdir'] = self.bias2_dir
            dirname = tkFileDialog.askdirectory(**self.dir_opt)
            if len(dirname) > 2:
                self.bbias2.configure(bg = "Green")
                self.bias2_dir = dirname
        if kind == "DARK1":
            if self.dark1_dir != "": self.dir_opt['initialdir'] = self.dark1_dir
            dirname = tkFileDialog.askdirectory(**self.dir_opt)
            if len(dirname) > 2:
                self.bdark1.configure(bg = "Green")
                self.dark1_dir = dirname
        if kind == "DARK2":
            if self.dark2_dir != "": self.dir_opt['initialdir'] = self.dark2_dir
            dirname = tkFileDialog.askdirectory(**self.dir_opt)
            if len(dirname) > 2:
                self.bdark2.configure(bg = "Green")
                self.dark2_dir = dirname
        if kind == "FLAT1":
            if self.flat1_dir != "": self.dir_opt['initialdir'] = self.flat1_dir
            dirname = tkFileDialog.askdirectory(**self.dir_opt)
            if len(dirname) > 2:
                self.bflat1.configure(bg = "Green")
                self.flat1_dir = dirname
        if kind == "FLAT2":
            if self.flat2_dir != "": self.dir_opt['initialdir'] = self.flat2_dir
            dirname = tkFileDialog.askdirectory(**self.dir_opt)
            if len(dirname) > 2:
                self.bflat2.configure(bg = "Green")
                self.flat2_dir = dirname
        if kind == "CALIB1":
            if self.calib1_dir != "":
                self.dir_opt['initialdir'] = self.calib1_dir
            dirname = tkFileDialog.askdirectory(**self.dir_opt)
            if len(dirname) > 2:
                self.bcalib1.configure(bg = "Green")
                self.calib1_dir = dirname
        if kind == "CALIB2":
            if self.calib2_dir != "":
                self.dir_opt['initialdir'] = self.calib2_dir
            dirname = tkFileDialog.askdirectory(**self.dir_opt)
            if len(dirname) > 2:
                self.bcalib2.configure(bg = "Green")
                self.calib2_dir = dirname

        # the initial directory is the last choosen
        self.init_dir = dirname
        return None

    def _select_std(self, group):
        self.estdname.setitems(get_std_list(self.std_group.get()))
        self.std_name.set('None')


    def _replace_text(self, entry_widget, text):
        entry_widget.delete(0, "end")
        entry_widget.insert(0, text)

    def load(self):
        file_to_load = tkFileDialog.askopenfile(mode='r',**self.file_opt)
        self.loadfile(file_to_load)

    def loadfile(self, file_to_load):
        """Load an option file.
        """
        for line in file_to_load:
            if len(line) > 1:
                line = line.split()
                if line[0] == "OBJECT": self.object_name = line[1]
                elif line[0] == "FILTER":
                    if line[1] in self.filters:
                        self.filter_name.set(line[1])
                elif line[0] == "BINCAM1": self.bin_cam1 = line[1]
                elif line[0] == "BINCAM2": self.bin_cam2 = line[1]
                elif line[0] == "SPESTEP": self.step = line[1]
                elif line[0] == "SPESTNB": self.step_nb = line[1]
                elif line[0] == "SPEORDR": self.order = line[1]
                elif line[0] == "SPEEXPT": self.exp_time = line[1]
                elif line[0] == "SPEDART": self.dark_time = line[1]
                elif line[0] == "OBSDATE": self.obs_date = line[1]
                elif line[0] == "BADFRMS": self.bad_frames = line[1]
                elif line[0] == "TARGETR": self.target_ra = line[1]
                elif line[0] == "TARGETD": self.target_dec = line[1]
                elif line[0] == "TARGETX": self.target_x = line[1]
                elif line[0] == "TARGETY": self.target_y = line[1]
                elif line[0] == "STDNAME":
                    if line[1] in self.standards:
                        self.std_name.set(line[1])
                
                elif line[0] == "DIRCAM1":
                    self.cam1_dir = " ".join(line[1:]).decode('utf-8')
                elif line[0] == "DIRCAM2": 
                    self.cam2_dir = " ".join(line[1:]).decode('utf-8')
                elif line[0] == "DIRBIA1": 
                    self.bias1_dir = " ".join(line[1:]).decode('utf-8')
                elif line[0] == "DIRBIA2": 
                    self.bias2_dir = " ".join(line[1:]).decode('utf-8')
                elif line[0] == "DIRDRK1": 
                    self.dark1_dir = " ".join(line[1:]).decode('utf-8')
                elif line[0] == "DIRDRK2": 
                    self.dark2_dir = " ".join(line[1:]).decode('utf-8')
                elif line[0] == "DIRFLT1": 
                    self.flat1_dir = " ".join(line[1:]).decode('utf-8')
                elif line[0] == "DIRFLT2": 
                    self.flat2_dir = " ".join(line[1:]).decode('utf-8')
                elif line[0] == "DIRCAL1": 
                    self.calib1_dir = " ".join(line[1:]).decode('utf-8')
                elif line[0] == "DIRCAL2": 
                    self.calib2_dir = " ".join(line[1:]).decode('utf-8')
                elif line[0] == "STDPATH": 
                    self.std_path = " ".join(line[1:]).decode('utf-8')
                elif line[0] == "PHAPATH": 
                    self.phase_path = " ".join(line[1:]).decode('utf-8')
                    
                # check other keywords
                elif len(line) > 1 and '#' not in line[0]:
                    self.other_keywords += ' '.join(line) + '\n'
        
        self._replace_text(self.eproject, self.object_name)
        self._replace_text(self.ebin1, self.bin_cam1)
        self._replace_text(self.ebin2, self.bin_cam2)
        self._replace_text(self.estep, self.step)
        self._replace_text(self.estnb, self.step_nb)
        self._replace_text(self.eorder, self.order)
        self._replace_text(self.eexpt, self.exp_time)
        self._replace_text(self.edart, self.dark_time)
        self._replace_text(self.eobsd, self.obs_date)
        self._replace_text(self.ebadf, self.bad_frames)
        self._replace_text(self.etargra, self.target_ra)
        self._replace_text(self.etargdec, self.target_dec)
        self._replace_text(self.etargx, self.target_x)
        self._replace_text(self.etargy, self.target_y)
        
        self.ekeys.insert(Tkinter.INSERT, self.other_keywords)

        if self.cam1_dir != "" : self.bcam1.configure(bg = "Green")
        if self.cam2_dir != "" : self.bcam2.configure(bg = "Green")
        if self.bias1_dir != "" : self.bbias1.configure(bg = "Green")
        if self.bias2_dir != "" : self.bbias2.configure(bg = "Green")
        if self.dark1_dir != "" : self.bdark1.configure(bg = "Green")
        if self.dark2_dir != "" : self.bdark2.configure(bg = "Green")
        if self.flat1_dir != "" : self.bflat1.configure(bg = "Green")
        if self.flat2_dir != "" : self.bflat2.configure(bg = "Green")
        if self.calib1_dir != "" : self.bcalib1.configure(bg = "Green")
        if self.calib2_dir != "" : self.bcalib2.configure(bg = "Green")
        if self.std_path != "" : self.bstd.configure(bg = "Green")
        if self.phase_path != "" : self.bphase.configure(bg = "Green")


    def saveas(self):

        """Save the option file.
        """

        # get filename
        filename = tkFileDialog.asksaveasfilename(**self.file_opt)

        if filename:
          optfile = open(filename, 'w')
          optfile.write("""## ORBS option file
# Generated by ORBS Opt-Creator
# Author: Thomas Martin <thomas.martin.1@ulaval.ca>

""")
          if self.eproject.get() != '':
              optfile.write("OBJECT " + self.eproject.get() + "\n")
          
          optfile.write("FILTER " + self.filter_name.get() + "\n")
          
          if self.ebin1.get() != '':
              optfile.write("BINCAM1 " + self.ebin1.get() + "\n")
          if self.ebin2.get() != '':
              optfile.write("BINCAM2 " + self.ebin2.get() + "\n")
          if self.estep.get() != '':
              optfile.write("SPESTEP " + self.estep.get() + "\n")
          if self.estnb.get() != '':
              optfile.write("SPESTNB " + self.estnb.get() + "\n")
          if self.eorder.get() != '':
              optfile.write("SPEORDR " + self.eorder.get() + "\n")
          if self.eexpt.get() != '':
              optfile.write("SPEEXPT " + self.eexpt.get() + "\n")
          if self.edart.get() != '':
              optfile.write("SPEDART " + self.edart.get() + "\n")
          if self.eobsd.get() != '':
              optfile.write("OBSDATE " + self.eobsd.get() + "\n")
          if self.ebadf.get() != '':
              optfile.write("BADFRMS " + self.ebadf.get() + "\n")
          if self.etargra.get() != '':
              optfile.write("TARGETR " + self.etargra.get() + "\n")
          if self.etargdec.get() != '':
              optfile.write("TARGETD " + self.etargdec.get() + "\n")
          if self.etargx.get() != '':
              optfile.write("TARGETX " + self.etargx.get() + "\n")
          if self.etargy.get() != '':
              optfile.write("TARGETY " + self.etargy.get() + "\n")
          if self.std_name.get() != 'None':
              optfile.write("STDNAME " + self.std_name.get() + "\n")
              
          if self.cam1_dir != '':
              optfile.write("DIRCAM1 " + self.cam1_dir.encode('utf-8') + "\n")
          if self.cam2_dir != '':
              optfile.write("DIRCAM2 " + self.cam2_dir.encode('utf-8') + "\n")
          if self.bias1_dir != '':
              optfile.write("DIRBIA1 " + self.bias1_dir.encode('utf-8') + "\n")
          if self.bias2_dir != '':
              optfile.write("DIRBIA2 " + self.bias2_dir.encode('utf-8') + "\n")
          if self.dark1_dir != '':
              optfile.write("DIRDRK1 " + self.dark1_dir.encode('utf-8') + "\n")
          if self.dark2_dir != '':
              optfile.write("DIRDRK2 " + self.dark2_dir.encode('utf-8') + "\n")
          if self.flat1_dir != '': 
              optfile.write("DIRFLT1 " + self.flat1_dir.encode('utf-8') + "\n")
          if self.flat2_dir != '': 
              optfile.write("DIRFLT2 " + self.flat2_dir.encode('utf-8') + "\n")
          if self.calib1_dir != '': 
              optfile.write("DIRCAL1 " + self.calib1_dir.encode('utf-8') + "\n")
          if self.calib2_dir != '': 
              optfile.write("DIRCAL2 " + self.calib2_dir.encode('utf-8') + "\n")
          if self.std_path != '': 
              optfile.write("STDPATH " + self.std_path.encode('utf-8') + "\n")
          if self.phase_path != '': 
              optfile.write("PHAPATH " + self.phase_path.encode('utf-8') + "\n")
              
          if self.ekeys.get(1.0, Tkinter.END) != '':
              optfile.write(self.ekeys.get(1.0, Tkinter.END))
        self.quit()
        return 0



def usage(): 
    print """ orbs-optcreator [option_file]
    Run the option file manager GUI for ORBS

    Author: Thomas Martin (thomas.martin.1@ulaval.ca)
    """

if __name__=='__main__':

    try:
        opts, args = getopt.getopt(sys.argv[1:], "", [])
    except getopt.GetoptError, err:
        print str(err)
        usage()
        sys.exit(2)

    file_open = None

            
    if (len(args) > 0):
        if os.path.exists(args[0]):
            file_open = open(args[0])
        else:
            print "Error : Option file does not exist !"
            sys.exit(2)

    # GUI
    root = Tkinter.Tk()
    root.title("ORBS Opt-Creator")
    opt_creator = OptCreator(root)
    if file_open:
        opt_creator.loadfile(file_open)
    root.mainloop()
