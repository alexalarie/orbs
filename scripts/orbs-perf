#!/usr/bin/python
# *-* coding: utf-8 *-*
# Author: Thomas Martin <thomas.martin.1@ulaval.ca>

## Copyright (c) 2010-2014 Thomas Martin <thomas.martin.1@ulaval.ca>
## 
## This file is part of ORBS
##
## ORBS is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## ORBS is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
## or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
## License for more details.
##
## You should have received a copy of the GNU General Public License
## along with ORBS.  If not, see <http://www.gnu.org/licenses/>.

####################################################
############ ORBS reduction script #################
####################################################

# Note that this script is aimed to run the whole reduction
# process with the options used by default. 
# To have more control on each function please use the file
# "scripts/example_script.py"

# To run this script simply use the following command :
# $ ./orbs option_file.opt
# Remember : for any help please refer to the file "Orbs/orbs.py"

import sys, os, time
import getopt

# Defining the path to ORBS module from script location
script_path = os.path.dirname(os.path.realpath(__file__)).split()
orbs_path = os.path.normpath(('%s'%os.sep).join(str(script_path[0]).split(os.sep)[:-1]))
sys.path.append(orbs_path)

from orbs.orbs import Orbs
from orb.core import Tools

def usage(): 
    print """usage: orbs-perf [OPTIONS]... OPTION_FILE...
  
  ORBS version: %s
  Author: Thomas Martin (thomas.martin.1@ulaval.ca)  
"""%orbs.core.__version__
    sys.exit(2)

def main():

    try:
        opts, args = getopt.getopt(sys.argv[1:], "s:c:12v", ['step=',
                                                             'noprint'])
    except getopt.GetoptError, err:
        print str(err)
        usage()

    single1 = False
    single2 = False
    step = 1
    calibration_laser_map_path = None
    
    start_time = time.time()

    
    if (len(args) > 0):
        to = Tools(logfile_name=os.path.basename(str(args[0])) + '.perf.log')
    else:
        to = Tools()
        
    #################
    # Check options #
    #################
    
    for opt, arg in opts:
        

        if opt in ['-s', "--step"]:
            step = float(arg)

        elif opt in ("-1", "--single1"):
            single1 = True
            
        elif opt in ("-2", "--single2"):
            single2 = True
            
        elif opt in ('-v', '--version'):
            print "ORBS version %s"%orbs.core.__version__
            exit(0)

        elif opt in ("-c", "--calib"):
            calibration_laser_map_path = arg
            if not os.path.exists(calibration_laser_map_path):
                print " > ERROR: The file does not exist !\n"
                sys.exit(2)
            
        elif opt == "--noprint":
            sys.stdout = open("stdout.log", "a")
            sys.stderr = open("stdout.log", "a")

        else: usage()
        
    ###################################
    # Run ORBS with the given options #
    ###################################
    
    if (len(args) > 0):
        f = open(to._logfile_name + '.res', 'a')
        to._print_msg("Option file : %s"%str(args[0]), color=True)
        project = Orbs(str(args[0]), overwrite=True)
            
        if single1 or single2:
            if single1: camera_number=1
            elif single2: camera_number=2
             
        
        to._print_msg("Profile check started at : " + time.ctime(start_time), color=True)

        perf_stats=None

        if step == 1:
            perf_stats = project.compute_alignment_vector(1)
        elif step == 2:
            perf_stats = project.compute_alignment_vector(2)
        elif step == 3:
            perf_stats = project.compute_cosmic_ray_map(1)
        elif step == 4:
            perf_stats = project.compute_cosmic_ray_map(2)
        elif step == 5:
            perf_stats = project.compute_interferogram(1, optimize_dark_coeff=False)
        elif step == 6:
            perf_stats = project.compute_interferogram(2, optimize_dark_coeff=True)
        elif step == 7:
            perf_stats = project.transform_cube_B()
        elif step == 8:
            perf_stats = project.merge_interferograms()
            project.add_missing_frames(0)
        elif step == 9:
            if calibration_laser_map_path != None:
                print 'A calibration map has already been given'
            else:
                perf_stats = project.compute_calibration_laser_map(1)
        elif step == 10:
            perf_stats = project.compute_spectrum(
                0, window_type='2.0', phase_cube=True,
                calibration_laser_map_path=calibration_laser_map_path)
        elif step == 11:
            perf_stats = project.compute_phase_maps(
                0, calibration_laser_map_path=calibration_laser_map_path)
        elif step == 12:
            perf_stats = project.compute_spectrum(
                0, window_type='1.8',
                calibration_laser_map_path=calibration_laser_map_path)
        elif step == 13:
            perf_stats = project.calibrate_spectrum(0)
        else:
            to._print_error('Bad step number')

        if perf_stats != None:
            f.write('%d %d %d %f %f\n'%(to.ncpus, perf_stats['quad-nb'], step,
                                        perf_stats['max-mem'],
                                        perf_stats['total-time']))
        end_time = time.time()
        
        to._print_msg("Script finished at : " + time.ctime(end_time), color=True)
        to._print_msg("Total time : " + str((end_time - start_time) / 3600.) + " hours", color=True)

        
    else: usage()

if __name__ == "__main__":
    main()



