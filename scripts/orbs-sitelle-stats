#!/usr/bin/python
# *-* coding: utf-8 *-*
# Author: Thomas Martin <thomas.martin.1@ulaval.ca>
# File: orbs-sitelle-stats

## Copyright (c) 2010-2017 Thomas Martin <thomas.martin.1@ulaval.ca>
## 
## This file is part of ORBS
##
## ORBS is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## ORBS is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
## or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
## License for more details.
##
## You should have received a copy of the GNU General Public License
## along with ORBS.  If not, see <http://www.gnu.org/licenses/>.

####################################################
############ ORBS SITELLE STATS ####################
####################################################

## Analyse a list of raw data files (typically a data cube) and print
## some useful stats (step size, modulation efficiency,
## temperature...)

import argparse
from argparse import ArgumentParser
import orb.core, orbs.version
from orb.core import Tools
from orb.core import ProgressBar
import numpy as np
import orb.utils

def main(args):
    to = Tools(no_log=True, config_file_name='config.sitelle.orb')
    files_list = list()

    # create file list
    with open(args.list_path, 'r') as f:
        for line in f:
            files_list.append(line.strip())
    files_list = to.sort_image_list(files_list, image_mode='sitelle')


    # get stats
    pos = list()
    pos1 = list()
    pos2 = list()
    pos3 = list()
    progress = ProgressBar(len(files_list))
    i = 0
    for path in files_list:

        hdu = to.read_fits(path, return_hdu_only=True)[0]
        if 'SITPZ1' in hdu.header:
            pos1.append(hdu.header['SITPZ1'])
        if 'SITPZ2' in hdu.header:
            pos2.append(hdu.header['SITPZ2'])
        if 'SITPZ3' in hdu.header:
            pos3.append(hdu.header['SITPZ3'])

        progress.update(i, info='analysing file {}/{}'.format(
            i,len(files_list)))
        i += 1
        
    progress.end()

    # fringe position analysis
    pos1 = np.array(pos1, dtype=float)
    pos2 = np.array(pos2, dtype=float)
    pos3 = np.array(pos3, dtype=float)
        
    pos = (pos1 + pos2 + pos3) / 3.

    mean_step_size = np.mean(orb.utils.sigmacut(np.diff(pos)))
    mean_step_size_err = np.std(orb.utils.sigmacut(np.diff(pos)))

    to._print_msg('Mean step size (in fringes): {} (+/- {})'.format(
        mean_step_size, mean_step_size_err))
            

    # plot
    if args.plot:
        import pylab as pl
        fig, axarr = pl.subplots(2, sharex=True)
    
        axarr[0].plot(np.diff(pos1))
        axarr[0].plot(np.diff(pos2))
        axarr[0].plot(np.diff(pos3))
        axarr[0].set_ylim([mean_step_size - 1,mean_step_size + 1])
        axarr[0].set_xlim([0, len(files_list)])
        axarr[0].set_title('Position error (in fringes)')
        pl.show()

        
    


if __name__ == "__main__":
    """Main entrance of the script.
    
    Parse arguments and launch the reduction process.
    """


    parser = ArgumentParser(
        version=('ORBS-version: {}, ORB-version: {}'.format(
            orbs.version.__version__, orb.core.__version__)),
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="Analyse a list of raw data files (typically a data cube) and print some useful stats.")

    parser.add_argument('list_path',
                        action='store',
                        help="Path to the list of files (The program will try to put them in order).")

    parser.add_argument('--plot', dest='plot',
                        action='store_true',
                        default=False,
                        help='Plot stats (pylab module must be installed).')

    args = parser.parse_args()

    main(args)
