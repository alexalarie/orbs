#!/usr/bin/python
# *-* coding: utf-8 *-*
# Author: Thomas Martin <thomas.martin.1@ulaval.ca>
# File: dstack

## Copyright (c) 2010-2014 Thomas Martin <thomas.martin.1@ulaval.ca>
## 
## This file is part of ORBS
##
## ORBS is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## ORBS is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
## or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
## License for more details.
##
## You should have received a copy of the GNU General Public License
## along with ORBS.  If not, see <http://www.gnu.org/licenses/>.

#############################################
############ DSTACK script ##################
#############################################

# This script helps the user to stack a set of frames in a cube. A
# list of frames path must be given. List files created by ORBS can be
# used. Custom lists can be created using the command:
# 'ls /path/to/file/*.fits > list'


import numpy as np
    
from orb.core import Tools

def usage(): 
    print """usage: reduce CUBE_NAME REDUCED_CUBE_NAME
    
    Reduce the size of a spectral cube by removing zeros frames."""
  
    sys.exit(2)

def get_nm_axis(hdr):
    dimz = hdr["NAXIS3"]
    nm_min = hdr["CRVAL3"]
    nm_step = hdr["CDELT3"]
    ref_point = hdr["CRPIX3"]
    return (np.arange(dimz) + ref_point - 1) * nm_step + nm_min

def main():

    if len(sys.argv) < 3: usage()

    path = sys.argv[1]
    result_path = sys.argv[2]
    if os.path.exists(path):
        to = Tools()
        data, hdr = to.read_fits(path, return_header=True)
        nonzeros_frames = np.nonzero(np.sum(np.sum(data, axis=0), axis=0))[0]
        data = data[:,:,nonzeros_frames[0]:nonzeros_frames[-1]+1]
        nm_axis = get_nm_axis(hdr)
        hdr["CRVAL3"] = nm_axis[nonzeros_frames[0]]
        to.write_fits(result_path, data, fits_header=hdr)
        
    else:
        print "FITS file does not exist"
       
if __name__ == "__main__":
    main()
