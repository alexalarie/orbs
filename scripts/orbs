#!/usr/bin/python
# *-* coding: utf-8 *-*
# Author: Thomas Martin <thomas.martin.1@ulaval.ca>

## Copyright (c) 2010-2014 Thomas Martin <thomas.martin.1@ulaval.ca>
## 
## This file is part of ORBS
##
## ORBS is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## ORBS is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
## or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
## License for more details.
##
## You should have received a copy of the GNU General Public License
## along with ORBS.  If not, see <http://www.gnu.org/licenses/>.

####################################################
############ ORBS reduction script #################
####################################################

# Note that this script is aimed to run the whole reduction
# process with the options used by default. 
# To have more control on each function please use the file
# "scripts/example_script.py"

# To run this script simply use the following command :
# $ ./orbs option_file.opt
# Remember : for any help please refer to the file "Orbs/orbs.py"

import sys, os, time
import getopt

import numpy as np

# Defining the path to ORBS module from script location
script_path = os.path.dirname(os.path.realpath(__file__)).split()
orbs_path = os.path.normpath(('%s'%os.sep).join(str(script_path[0]).split(os.sep)[:-1]))
sys.path.append(orbs_path)

import orb
from orb.core import Tools
import orbs
from orbs.orbs import Orbs


def usage(): 
    print """usage: orbs [OPTIONS]... OPTION_FILE...

    Run the whole reduction process with the options used by default.

  -1 --single1: Reduction of camera 1 alone

  -2 --single2: Reduction of camera 2 alone

  -a --apod=: apodization function. Can be one of the extended
     Norton-Beer functions (Naylor & Tahic 2007) : enter one of
     following coefficients : 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7,
     1.8, 1.9, 2.0. The coefficient 1.0 stands for NO apodization
     (default). You can also use one of the following window
     functions: barthann, bartlett, blackman, blackmanharris, bohman,
     hamming, hann, nuttall, parzen).
  
  -b --bad=: bad frames must be written with separating commas ',' (no
     whitespace) e.g. 150,217,218,219. For multiple images use ':'
     e.g. 170:180. Note that the last image index will be included
     (180 in the example). You can mix ',' and ':'
     (e.g. 165,170:180,185:190,200).
      
  -c --calib=: calibration laser file path

  -m --phasemap=: phase map (0th order) path

  -q --quadrants: save the resulting spectrum in quadrants to avoid
     loading a full data cube in memory (useful for a large data
     cube). Those FITS files can be read as independent cubes (default
     False)

  -o --overwrite: overwrite existing FITS file during the reduction
     process.

  -p --phase=: Number of points around ZPD to use for phase correction
     during spectrum computation. If 0, no phase correction will be
     done and the resulting spectrum will be the absolute value of the
     complex spectrum.

  -v --version: Version of ORBS.

  --stars: Compute only the spectrum of the detected stars in the
     cube. The interferogram of each star is created using a 2D
     gaussian fit. If you want to use a phase map to compute the stars
     cube you must first reduce the cube the default way or using the
     option --flat (without using the option --stars: Those two
     options are not compatible because a phase map can't be created
     from a stars cube).

  --nostar: Run a full reduction using both cubes but skip all the
     star-dependant processes. Warning, this kind of reduction is far
     less precise and must be used only to reduce non-astronomical
     data or data without any stars. the default alignement parameters
     (defined in the configuration file) are used.

  --alt_merge: Alternative merging process. Star photometry is not
     used during the merging process. Might be more noisy but useful
     if for some reason the correction vectors cannot be well computed
     (e.g. not enough good stars, intense emission lines everywhere in
     the field)
  
  --flat: The reduction stops to the phase map step. This option is
     best used with flat cubes. All star dependant processes are
     skipped also (same as --nostar option). Note that this option is
     not compatible with --stars because a phase map can't be created
     from a stars cube.

  --standard: Use it to reduce standard star cube. Instead of
     returning a full cube, return the spectrum of the standard. The
     standard star position must be the target position defined in the
     option file.

  --nosky: If intense emission lines are present in the whole area, no
     'sky' like pixels (dominated by the continuum) are present. In
     this case sky dependant processes must be skipped.

  --init_angle=: Change config variable INIT_ANGLE for this reduction
     only. You can also change it definitively by editing the file
     orbs/data/config.orb.

  --align=: Alignment coefficients if already known. Alignment step is
     skipped. Useful to compute a FLAT cube with alignments
     coefficients computed from an astrophysical object. Alignment
     coefficients must be formatted this way: dx,dy,dr,da,db (no
     space, 5 numbers comma separated):
     e.g. --align=25.2,36.5,-85.8,0.1,0.5

  --start_step=: Starting step. Use it to recover from an error at a
     certain step without having to run the whole process one more
     time. Note that the step designation is different for the full
     reduction (2 cameras) and the single camera reduction (1
     camera). Note that some processes are also skipped if the option
     --nostar is used (e.g. the first step : Compute alignment
     vectors).

  --noprint: The standard output is redirected to the file
     'stdout.log'. Helpful for logging error messages.



  Full reduction steps:
  ---------------------
  
    1. Compute alignment vectors (see: compute_alignment_vector())
    2. Compute cosmic ray maps (see: compute_cosmic_ray_map())
    3. Compute interferograms (see: compute_interferogram())
    4. Transform cube B (see: transform_cube_B())
    5. Merge interferograms (see: merge_interferograms())
    6. Compute calibration laser map (see: compute_calibration_laser_map())
    7. Compute phase maps (see: compute_phase_maps())
    8. Compute spectrum (see: compute_spectrum())
    9. Calibrate spectrum (see: calibrate_spectrum())

  Single reduction steps:
  -----------------------
  
    1. Compute alignment vectors (see: compute_alignment_vector())
    2. Compute cosmic ray maps (see: compute_cosmic_ray_map())
    3. Compute interferogram (see: compute_interferogram())
    4. Correct interferogram (see: correct_interferogram())
    5. Compute calibration laser map (see: compute_calibration_laser_map())
    6. Compute phase maps (see: compute_phase_maps())
    7. Compute spectrum (see: compute_spectrum())
    8. Calibrate spectrum (see: calibrate_spectrum())

  ORBS version: {}, ORB version: {}
  Author: Thomas Martin (thomas.martin.1@ulaval.ca)  
""".format(orbs.version.__version__, orb.version.__version__)
    sys.exit(2)

def main():

    try:
        opts, args = getopt.getopt(sys.argv[1:], "c:m:b:a:p:12qov",
                                   ["calib=","bad=","apod=","single1",
                                    "single2", "quadrants","init_angle=",
                                    "start_step=","stars","overwrite","phase=",
                                    "nostar", "phasemap=", "flat", "align=",
                                    "version", "nosky", "alt_merge", "standard",
                                    "noprint"])
    except getopt.GetoptError, err:
        print str(err)
        usage()

    # defining default options
    alt_merge = False
    no_sky = False
    overwrite = False
    single1 = False
    single2 = False
    quadrants = False
    stars = False
    no_star = False
    flat = False
    standard = False
    
    n_phase = None
    calibration_laser_map_path = None
    phase_map_0_path = None
    bad_frames_vector = None
    apodization_function = None
    init_angle = None
    start_step = 1
    alignment_coeffs = None
    
    start_time = time.time()


    if (len(args) > 0):
        if not os.path.exists(args[0]):
            raise Exception('Option file %s does not exist'%args[0])
    
    if (len(args) > 0):
        to = Tools(logfile_name=os.path.basename(str(args[0])) + '.log')
    else:
        to = Tools()
        
    #################
    # Check options #
    #################
    
    for opt, arg in opts:
        
        if opt == "--noprint":
            sys.stdout = open("stdout.log", "a")
            sys.stderr = open("stdout.log", "a")
            
        if opt in ("-1", "--single1"):
            single1 = True
            
        if opt in ("-2", "--single2"):
            single2 = True
            
        if single1 and single2:
            print " > ERROR: options -1 and -2 or --single1 and --single2 are not compatible. You must choose the camera you want to reduce in single mode\n"
            sys.exit(2)
            
        if opt in ("-o", "--overwrite"):
            overwrite = True
            
        if opt in ("-p", "--phase"):
            try:
                n_phase = int(arg)
            except:
                print " > ERROR: The number of points used for phase correction must be an integer.\n"
                sys.exit(2)
                
        if opt == "--nostar":
            no_star = True
            
        if opt in ("-q", "--quadrants"):
            quadrants = True
            
        if opt == "--stars":
            stars = True
            
        if opt  == "--nosky":
            no_sky = True
            
        if opt == "--alt_merge":
            alt_merge = True
            
        if opt == "--flat":
            flat = True
            no_star=True
            
        if opt == "--standard":
            standard = True
            
        if stars and flat:
            print " > ERROR: --stars and --flat options are not compatible. A phase map cannot be created from a stars cube !"
            sys.exit(2)
            
        if opt in ("-c", "--calib"):
            calibration_laser_map_path = arg
            if not os.path.exists(calibration_laser_map_path):
                print " > ERROR: The file does not exist !\n"
                sys.exit(2)
                
        if opt in ("-m", "--phasemap"):
            phase_map_0_path = arg
            if not os.path.exists(phase_map_0_path):
                print " > ERROR: The file does not exist !\n"
                sys.exit(2)
                
        if opt in ("-a", "--apod"):
            apodization_function = arg
            
        if opt in ("-b", "--bad"):
            bad_frames = arg.split(",")
            bad_frames_list = list()
            for ibad in bad_frames:
                if (ibad.find(":") > 0):
                    for i in range(int(ibad.split(":")[0]),
                                   int(ibad.split(":")[1])+1):
                        bad_frames_list.append(i)
                else:
                    bad_frames_list.append(int(ibad))
            bad_frames_vector = np.array(bad_frames_list)

        if opt == "--init_angle":
            init_angle = float(arg)

        if opt == "--start_step":
            start_step = float(arg)

        if opt == "--align":
            try:
                alignment_coeffs = np.array(arg.split(",")).astype(float)
            except:
                print " > ERROR: Bad format for alignment coefficients (--align=dx,dy,dr,da,db)"
                sys.exit(2)
            if alignment_coeffs.shape[0] != 5:
                print " > ERROR: Bad format for alignment coefficients (--align=dx,dy,dr,da,db)"
                sys.exit(2)
            if single1 or single2:
                print " > WARNING: No use for alignment coefficients in single camera mode"
                
        if opt in ('-v', '--version'):
            print "ORBS version %s"%orbs.version.__version__
            exit(0)

    ########################
    # Log passed arguments #
    ########################
    if (len(args) > 0):
        # header of the log
        to._print_msg("", color=True)
        to._print_msg("#"*45, color=True)
        to._print_msg("## ORBS reduction process ", color=True)
        to._print_msg("#"*45, color=True)
        to._print_msg("", color=True)
        
        to._print_msg("Passed arguments : ", color=True)
        for opt, arg in opts:
            to._print_msg(' ' + opt + ' ' + arg)

        if single1 == True:
            to._print_msg(
                "Camera 1 reduction in single mode", color=True)

        if single2 == True:
            to._print_msg(
                "Camera 2 reduction in single mode", color=True)

        if overwrite == True:
            to._print_warning(
                "Overwrite mode ON (existing files will be replaced)")

        if n_phase != None:
            if n_phase == 0:
                to._print_msg(
                    "No phase correction will be done", color=True)
            else:
                to._print_msg(
                    "Number of points used for phase correction: %d"%n_phase,
                    color=True)

        if bad_frames_vector != None:
            to._print_msg(
                "Bad frames : %s"%bad_frames_vector, color=True)
            
        if stars == True:
            to._print_msg(
                "Computing only stars spectrum", color=True)

        if no_star == True:
            to._print_warning(
                "Star-dependant processes will be skipped")

        if no_sky:
            to._print_warning(
                "Sky-dependant processes will be skipped")

        if alt_merge:
            to._print_warning(
                "Alternative merging process")
            
        if flat == True:
            to._print_msg(
                "Only the phase map will be computed. No spectrum computation !", color=True)

        if standard == True:
            to._print_msg(
                "Standard cube: The spectrum of the standard star will be returned", color=True)

        if quadrants == True:
            to._print_msg(
                "Resulting spectrum will be splitted in quadrants", color=True)

        if calibration_laser_map_path != None:
            to._print_msg(
                "Calibration laser map path: %s"%calibration_laser_map_path,
                color=True)

        if phase_map_0_path != None:
            to._print_msg(
                "Phase map (order 0) path: %s"%phase_map_0_path, color=True)

        if apodization_function != None:
            to._print_msg(
                "Apodization function: %s"%apodization_function, color=True)
        else:
            to._print_msg(
                "No apodization will be done to the computed spectrum", color=True)

        if init_angle != None: 
            to._print_msg("Initial angle: %f"%init_angle, color=True)

        if start_step != 1: 
            to._print_msg("Starting step: %d"%start_step, color=True)

        if alignment_coeffs != None:
            to._print_msg(
                "Alignment coefficients: %s"%str(alignment_coeffs),
                color=True)


    else: usage()
        
    ###################################
    # Run ORBS with the given options #
    ###################################
    
    if (len(args) > 0):
        to._print_msg("Option file : %s"%str(args[0]), color=True)
        project = Orbs(str(args[0]), overwrite=overwrite)
        if init_angle != None:
            project.set_init_angle(init_angle)
            
        if single1 or single2:
            if single1: camera_number=1
            elif single2: camera_number=2
            to._print_msg("Reduction of the camera %d in single mode started at : "%camera_number + time.ctime(start_time), color=True)
            project.single_reduction(
                camera_number=camera_number,
                calibration_laser_map_path=calibration_laser_map_path, 
                bad_frames_vector=bad_frames_vector,
                apodization_function=apodization_function,
                start_step=start_step,
                save_as_quads=quadrants,
                n_phase=n_phase, no_star=no_star,
                phase_map_only=flat,
                phase_map_0_path=phase_map_0_path,
                standard=standard)
            
        else:
            to._print_msg("Full reduction started at : " + time.ctime(start_time), color=True)
            project.full_reduction(
                calibration_laser_map_path=calibration_laser_map_path, 
                bad_frames_vector=bad_frames_vector,
                apodization_function=apodization_function,
                start_step=start_step,
                save_as_quads=quadrants,
                create_stars_cube=stars,
                n_phase=n_phase, no_star=no_star,
                phase_map_only=flat,
                phase_map_0_path=phase_map_0_path,
                alignment_coeffs=alignment_coeffs,
                no_sky=no_sky, alt_merge=alt_merge,
                standard=standard)
        end_time = time.time()
        to._print_msg("Script finished at : " + time.ctime(end_time), color=True)
        to._print_msg("Total time : " + str((end_time - start_time) / 3600.) + " hours", color=True)         
    else: usage()

if __name__ == "__main__":
    main()



