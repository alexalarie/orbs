#!/usr/bin/python
# *-* coding: utf-8 *-*
# Author: Thomas Martin <thomas.martin.1@ulaval.ca>

## Copyright (c) 2010-2014 Thomas Martin <thomas.martin.1@ulaval.ca>
## 
## This file is part of ORBS
##
## ORBS is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## ORBS is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
## or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
## License for more details.
##
## You should have received a copy of the GNU General Public License
## along with ORBS.  If not, see <http://www.gnu.org/licenses/>.

####################################################
############ ORBS TempReader #######################
####################################################

# This script has been created to update headers of the camera 2 given
# a temperature file created during the observations

import getopt

from orb.core import Tools

class TempReader(Tools):

    temp_list = None
    frame_list = None
    
    def read_temperature_files(self, folder_path):
        """Read files giving the temperature of each frame created by
        the camera 2 of SpIOMM.

        .. note:: The temperature file must be in the same folder as
          the frames and its name must be of the form *_temp.txt
        """
        frame_files_list = [file_name
                           for file_name
                           in os.listdir(folder_path)
                           if file_name[-5:] == ".fits"]
        frame_files_list.sort()
        temp_files_list = [file_name
                           for file_name
                           in os.listdir(folder_path)
                           if file_name[-9:] == "_temp.txt"]
        
        temp_list = list()
        time_list = list()
        for temp_file_path in temp_files_list:
            # open each temperature file and read it
            temp_file = self.open_file(temp_file_path, 'r')
            for temp_line in temp_file:
                if len(temp_line) > 2:
                    temp_list.append(float(temp_line.split()[-1].replace(',','.')))
                    time_list.append(temp_line.split()[-3].split(':'))

        if len(temp_list) == 0:
            self._print_error("I must have at least one temperature file (*._temp.txt)")
        elif len(frame_files_list) == 0:
            self._print_error("I must have at least one frame file to update file (*._fits)")

        elif len(temp_list) > len(frame_files_list):
            self._print_warning("Oops ! The list of frame temperature is longer (%d) than the number of frames(%d). You must correct it !."%(len(temp_list), len(frame_files_list)))
            temp_list = self.correct_temp_list(temp_list, time_list, frame_files_list)
            
        elif len(temp_list) < len(frame_files_list):
            self._print_error("List of frame temperatures is shorter than the number of frames. This list cannot be used !")
            temp_list = None


        self.temp_list = temp_list

        self.frame_list = frame_files_list
        return temp_list


    def correct_temp_list(self, temp_list, time_list, frame_list):
        def add_exp_time(t, exp_time):
            sec_time = t[0] * 3600 + t[1] * 60 + t[2]
            sec_time += exp_time
            t[0] = (sec_time - sec_time%3600)/3600
            sec_time -= t[0] * 3600
            t[1] = (sec_time - sec_time%60)/60
            sec_time -= t[1] * 60
            t[2] = sec_time
            if t[0] > 12:
                t[0] -= 24
            return t

        def sec_conv(t):
            return t[0] * 3600 + t[1] * 60 + t[2]

        saved_temp_list = list(temp_list)
        # LAST FRAME DELETED ? ######
        if len(temp_list) == len(frame_list) + 1:
            self._print_msg("It appears that it lacks one file to number of frames. May be the last file has been deleted.\n > Do you want to remove the last temperature in the list ?")
            answer = raw_input("Type 'yes' or 'no' : ")
            if answer == 'yes' : return temp_list[:-1]
            elif answer == 'no' :  self._print_msg("Okay I will try to find the bad file using the time of the recorded temperature and the modification time of the file")
            else:
                self._print_msg("Sorry I do not understand your answer :(")
                quit()

        # TIME COMPARISON ############
        self._print_msg("To compare the recorded time of the frame and the time of the temperature value I need to know the exposition time.")
        answer = raw_input("Exposition time [in s] : ")
        try:
            exposition_time = int(answer)
        except:
            self._print_msg("Your answer must be a valid number")
            quit()

        # get modification time of frames and time normalization
        mod_time_list = list()
        for iframe in range(len(frame_list)):
            mod_time = time.ctime(
                os.path.getmtime(frame_list[iframe])).split()[-2].split(':')
            mod_time[0] = int(mod_time[0])
            mod_time[1] = int(mod_time[1])
            mod_time[2] = int(mod_time[2])
            if mod_time[0] > 12:
                mod_time[0] -= 24
            mod_time_list.append(mod_time)
        for itime in range(len(time_list)):
            temp_time = time_list[itime]
            temp_time[0] = int(temp_time[0])
            temp_time[1] = int(temp_time[1])
            temp_time[2] = int(temp_time[2])
            if temp_time[0] > 12:
                temp_time[0] -= 24
            time_list[itime] = temp_time


        # check for double temperatures (same time)
        doublet_list = list()
        for itime in range(len(time_list) - 1):
            if time_list[itime] == time_list[itime+1]:
                doublet_list.append(itime)
                
        if len(doublet_list) > 0 :
            self._print_warning("One or more doublets (same time) have been found in the temperature list. There might be an error. Position(s) of the doublet(s) : %s"%str(doublet_list))
                    
        bad_frames_list = list()
        still_correcting = True
        pass_index = -1
        while still_correcting:
            pass_index += 1
            still_correcting = False
            for iframe in range(len(frame_list)):
                if len(time_list) <= iframe: break
                guessed_time = sec_conv(time_list[iframe]) + exposition_time
                if abs(sec_conv(mod_time_list[iframe])
                       - guessed_time) > exposition_time / 2. + .5:
                    time_list.pop(iframe)
                    temp_list.pop(iframe)
                    bad_frames_list.append(iframe + pass_index)
                    still_correcting = True
                    break
                if iframe == len(frame_list) - 1: # end of the frame list
                    bad_frames_list += range(iframe + 1 + pass_index, len(time_list) + pass_index)
                    time_list = time_list[:iframe+1]
                    temp_list = temp_list[:iframe+1]
                    
        self._print_msg("%d bad temperature values have been detected: %s"%(len(bad_frames_list), str(bad_frames_list)))

        if len(time_list) == len(frame_list):
            self._print_msg("It seems that removing those bad temperature values has solved the problem ! Do you want to update the headers of the frames ?")
            answer = raw_input("Type 'yes' or 'no' : ")
            if answer == 'yes' : return temp_list
            elif answer == 'no' : self._print_msg("Sorry I can't do anything else for you...")
            else:
                self._print_msg("Sorry I do not understand your answer :(")
                quit()
            quit()
            
        else:
            self._print_warning("Hmm, it doesn't work. There is still a difference in the length of the lists (%d). I don't understand... and I cannot update the headers"%(len(time_list) - len(frame_list)))
            temp_list = saved_temp_list
            frame_to_remove = list()
            while (len(temp_list) - len(frame_to_remove) != len(frame_list)):
                answer = raw_input("You can enter the index of an entry to remove. But be careful I cannot check anything: [Enter nothing to quit, enter last to remove the last one] (%d to remove): "%(len(temp_list) - (len(frame_list)
                       + len(frame_to_remove))))
                if answer == '':
                    quit()
                try:
                    if answer == 'last':
                        answer = len(temp_list) - 1
                    else:
                        answer = int(answer)
                    frame_to_remove.append(answer)
                except:
                    self._print_warning("Please give me an integer !")
            
            
            if len(temp_list) - len(frame_to_remove) == len(frame_list):
                self._print_msg("It seems that removing those bad temperature values has solved the problem ! Do you want to update the headers of the frames ?")
                answer = raw_input("Type 'yes' or 'no' : ")
                if answer == 'yes' :
                    temp_list = [i for j,
                                 i in enumerate(temp_list)
                                 if j not in frame_to_remove]
                    return temp_list
                elif answer == 'no' :
                    self._print_msg("Sorry I can't do anything else for you...")
                    quit()
                else:
                    self._print_msg("Sorry I do not understand your answer :(")
                    quit()
                
    
    def update_frames_header(self):
        if self.temp_list == None or self.frame_list == None:
            self._print_error("You must read the folder before updating frames header. Use read_temperature_files method first.")
        if len(self.temp_list) != len(self.frame_list):
            self._print_error("The length of the temperature list and the number of frames must be the same")

        for iframe in range(len(self.frame_list)):
            self._print_msg(
                "Updating header of file : %s"%self.frame_list[iframe])
            self._update_fits_key(self.frame_list[iframe],
                                  'CCD-TEMP',
                                  self.temp_list[iframe],
                                  'CCD temperature at start of exposure in C')

def usage(): 
    print """ orbs-tempreader

    Read the temperature files contained in a frame folder and update
    frames header.

    This script must be run in the folder that has to be checked.

    If the number of temperature listed and the number of frames is
    different try to correct the problem.

  Author: Thomas Martin (thomas.martin.1@ulaval.ca)
"""

def main():

    try:
        opts, args = getopt.getopt(sys.argv[1:], "h",
                                   ["help"])
    except getopt.GetoptError, err:
        print str(err)
        usage()
        sys.exit(2)

 
    # Check options    
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage()
            quit()
       

   
    # Check folder and update header
    tempreader = TempReader()
    tempreader.read_temperature_files("./")
    tempreader.update_frames_header()
    

if __name__ == "__main__":
    main()



